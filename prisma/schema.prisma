// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    STUDENT
    INSTRUCTOR
    ADMIN
}

model User {
    id        Int       @id @default(autoincrement())
    clerkId   String    @unique
    username  String?   @unique
    email     String    @unique
    createdAt DateTime  @default(now())
    lastLogin DateTime?
    role      UserRole  @default(STUDENT)
    profile   Profile?

    Logins Logins[]

    Course     Course[]
    Comment    Comment[]
    Enrollment Enrollment[]
    Submission Submission[]
}

model Profile {
    id           Int       @id @default(autoincrement())
    user         User      @relation(fields: [userId], references: [id])
    userId       Int       @unique
    firstName    String?
    lastName     String?
    bio          String?
    dateOfBirth  DateTime?
    phoneNumber  String?
    address      String?
    profileImage String?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
}

model Logins {
    id        Int      @id @default(autoincrement())
    userId    Int      @unique
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
}

model Course {
    id          Int      @id @default(autoincrement())
    title       String
    description String
    imageUrl    String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    ownerId    Int
    owner      User         @relation(fields: [ownerId], references: [id])
    Challenge  Challenge[]
    Enrollment Enrollment[]
}

model Challenge {
    id          Int        @id @default(autoincrement())
    title       String
    description String
    difficulty  Difficulty
    course      Course     @relation(fields: [courseId], references: [id])
    courseId    Int
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    // Relations
    submissions Submission[]
}

model BlogPost {
    id        Int      @id @default(autoincrement())
    title     String
    content   String
    published Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    comments Comment[]
}

model Comment {
    id        Int      @id @default(autoincrement())
    content   String
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    post      BlogPost @relation(fields: [postId], references: [id])
    postId    Int
    createdAt DateTime @default(now())
}

model Enrollment {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    course    Course   @relation(fields: [courseId], references: [id])
    courseId  Int
    progress  Float    @default(0)
    createdAt DateTime @default(now())
}

model Submission {
    id          Int              @id @default(autoincrement())
    user        User             @relation(fields: [userId], references: [id])
    userId      Int
    challenge   Challenge        @relation(fields: [challengeId], references: [id])
    challengeId Int
    code        String
    status      SubmissionStatus
    createdAt   DateTime         @default(now())
}

enum Role {
    USER
    TUTOR
    ADMIN
}

enum Difficulty {
    EASY
    MEDIUM
    HARD
}

enum SubmissionStatus {
    PENDING
    ACCEPTED
    REJECTED
}
